{
  "hash": "8cd7ef812b627f9c7c718d3414b3103c",
  "result": {
    "markdown": "---\ntitle: 'Creating Synthetic People Analytics Data'\ndate: 2023-08-10\ndescription: \"Some simple methods for creating people analytics data.\"\nauthor: \n    - name: Stephen Pearce\n    - name: Adam D McKinnon\ncategories: [Synthetic Data, People Analytics]\nimage: \"maxim-berg-Ac02zYZs22Y-unsplash.jpg\"\ntitle-block-banner: true\ndraft: false\n---\n\n::: {.cell code_folding='false'}\n::: {.cell-output-display}\n![[Photo by Maxim Berg on Unsplash](https://unsplash.com/@maxberg).](maxim-berg-Ac02zYZs22Y-unsplash.jpg){width=100%}\n:::\n:::\n\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(lubridate)\nlibrary(ggplot2)\n\ntheme_set(theme_linedraw() + theme(legend.position = \"bottom\"))\n```\n:::\n\n\n## Rationale\n\nSynthetic datasets can be useful for testing and explaining analytical methods, especially in the people analytics field where real-world data is not able to be shared. While there are a number of example datasets out there for use (eg. IBM Employee Attrition & Performance (canonical link?)) in many situations there is a need for data with a specific set of characteristics. In this case, it may be easier to generate the data yourself to fit the specific need.\n\n## Generating a basic dataset\n\nWhen the requirements are relatively simple we can get most of the way using R's inbuilt random generators, either sampling from a statistical distribution (eg. \\`rnorm\\` for a random value from a Normal distribution) or sampling from a defined list of options and probabilities with \\`sample\\`.\n\nUsing a combination of these functions, we can generate some synthetic data that approximates what we might expect from a people analytics dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerate_basic_data <- function(num_rows) {\n  # Going to be doing a lot of repeated sampling of a fixed size with \n  # replacement, so customise the sample function with the right defaults\n  sample_replace <- function(x, prob = NULL) {\n    sample(x = x, prob = prob, size = num_rows, replace = T)\n  }\n  \n  data_frame(\n    ID = 1:num_rows,\n    age = rnorm(num_rows, mean = 40, sd = 5),\n    hire_date = sample_replace(seq.Date(from = dmy(\"01/01/1990\"), to = today(), by = \"1 day\")),\n    job_family = sample_replace(c(\"Engineering\", \"Sales\", \"Administration\"), prob = c(0.6,0.25, 0.15)),\n    engagement = sample_replace(c(\"Full Time\", \"Part Time\"), prob = c(0.9, 0.1)),\n    employment = sample_replace(c(\"Permanent\", \"Contract\"), prob = c(0.7,0.3)),\n    state = sample_replace(c(\"VIC\",\"NSW\",\"QLD\"), prob = c(0.5, 0.3, 0.2))\n  )\n}\n\ngenerate_basic_data(num_rows = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 7\n      ID   age hire_date  job_family  engagement employment state\n   <int> <dbl> <date>     <chr>       <chr>      <chr>      <chr>\n 1     1  54.0 1997-02-27 Sales       Full Time  Permanent  VIC  \n 2     2  32.9 2022-11-26 Sales       Full Time  Contract   VIC  \n 3     3  32.8 2008-08-22 Engineering Part Time  Permanent  VIC  \n 4     4  43.0 1994-05-19 Engineering Full Time  Contract   VIC  \n 5     5  43.4 2012-12-26 Engineering Full Time  Permanent  NSW  \n 6     6  45.0 2007-03-21 Engineering Part Time  Permanent  VIC  \n 7     7  35.3 2020-11-18 Engineering Part Time  Contract   QLD  \n 8     8  45.4 1999-12-02 Engineering Full Time  Permanent  NSW  \n 9     9  45.1 1991-05-12 Engineering Full Time  Permanent  VIC  \n10    10  38.7 2006-08-08 Engineering Full Time  Permanent  VIC  \n```\n:::\n:::\n\n\n## Related variables\n\nTo make a list behave realistically however, we shouldn't allow all the data points to be randomly generated independently of each other. There are often correlations and dependencies between variables and it may be important to include these in your synthetic data set.\n\nIf you are trying to create something that has similar properties to a real dataset, perform an exploratory analysis to understand what correlations are present in the existing data and decide which are relevant for your purpose. Then, we will need to adjust the data generation code to take these differences into account. It is a bit more work because we will now need to have a separate data generation function for each correlated variable, but it is necessary if we want these observed interactions to be in the final data.\n\nFor example, say the main office for our example company was in Victoria. We would expect the administrative staff to be more likely to work there rather than being randomly distributed across the states. To make this work we will need to change how we randomly select a state to be dependent on the job family.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_state <- function(job) {\n  # Different State probabilities depending on job family\n  prob_for_family <- list(\n    \"Engineering\" = c(0.5, 0.3, 0.2),\n    \"Sales\" = c(0.5, 0.3, 0.2),\n    \"Administration\" = c(0.8, 0.1, 0.1)\n  )\n\n  # Randomly select the state using the per-job probabilities\n  map_chr(\n    job, \n    ~sample(c(\"VIC\",\"NSW\",\"QLD\"), size = 1, prob = prob_for_family[[.]])\n    )\n}\n```\n:::\n\n\nThe first part of this process is to create a way to adjust the state probability weightings based on a job family. We can keep things simple in this example by using a named list where the names are the three job families and the values are the probabilities to select each state for that job family. Here, we have left the Engineering and Sales families at 50% VIC, 30% NSW, and 20% QLD from the original example but changed the Administration family to be 80%/10%/10% respectively.\n\nNext, we randomly generate the state data. In order to change the probability weightings each time we will use \\`map_chr\\` to apply our sample function over the job families, randomly selecting one state each time, but using the probabilities we defined above.\n\n## More complex interactions\n\nThis same approach can be extended as the interactions become more complex. For example, we could imagine a scenario in which employment type is dependent on \\*both\\* the hire date and the job family. How would we generate a data set in which more recent hires (\\\\\\<5 years) are more likely to be on short-term contracts, as are Sales staff.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_employment <- function(hired, job) {\n    # Probability map of Permanent/Contract employment for combinations of \n    # new/old hires and job family\n    prob_map <- list(\n      new_hire = list(\n        \"Engineering\" = c(0.7, 0.3),\n        \"Sales\" = c(0.4, 0.6),\n        \"Administration\" = c(0.7, 0.3)\n      ),\n      old_hire = list(\n        \"Engineering\" = c(0.9, 0.1),\n        \"Sales\" = c(0.7, 0.3),\n        \"Administration\" = c(0.9, 0.1)\n      )\n    )\n \n    hire_status = ifelse(\n      time_length(hired %--% today(), \"years\") < 5, \n      \"new_hire\", \n      \"old_hire\"\n    )\n    \n    map2_chr(\n      hire_status, job, \n      ~sample(c(\"Permanent\", \"Contract\"), size = 1, prob = prob_map[[.x]][[.y]])\n    )\n  }\n```\n:::\n\n\nWhile a bit more involved to determine the probability weightings than the previous example, the overall structure remains the same.\n\n## Making use of it\n\nTo bring it all together, we can now swap out how we randomly selected state and employment type in the first basic example with our two functions above that randomly generate data dependent on other data columns. These other data columns are generated earlier in the process and then passed along to our new functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerate_complex_data <- function(num_rows) {\n  sample_replace <- function(x, prob = NULL) {\n    sample(x = x, prob = prob, size = num_rows, replace = T)\n  }\n  \ndata_frame(\n    ID = 1:num_rows,\n    age = rnorm(num_rows, mean = 40, sd = 5),\n    hire_date = sample_replace(seq.Date(from = dmy(\"01/01/1990\"), to = today(), by = \"1 day\")),\n    job_family = sample_replace(c(\"Engineering\", \"Sales\", \"Administration\"), prob = c(0.6,0.25, 0.15)),\n    engagement = sample_replace(c(\"Full Time\", \"Part Time\"), prob = c(0.9, 0.1)),\n    employment = sample_employment(hire_date, job_family),\n    state = sample_state(job_family) \n  )\n}\n\ngenerate_complex_data(num_rows = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 7\n      ID   age hire_date  job_family     engagement employment state\n   <int> <dbl> <date>     <chr>          <chr>      <chr>      <chr>\n 1     1  37.1 1990-01-05 Engineering    Full Time  Permanent  NSW  \n 2     2  36.8 2017-10-15 Sales          Full Time  Permanent  NSW  \n 3     3  39.4 2010-01-06 Engineering    Full Time  Contract   VIC  \n 4     4  44.7 2016-09-12 Administration Full Time  Permanent  VIC  \n 5     5  46.4 2004-05-17 Engineering    Full Time  Contract   QLD  \n 6     6  38.6 2020-11-02 Administration Full Time  Permanent  VIC  \n 7     7  48.5 2003-05-05 Administration Full Time  Permanent  NSW  \n 8     8  36.8 2014-11-15 Engineering    Full Time  Permanent  VIC  \n 9     9  39.6 2013-02-11 Engineering    Full Time  Permanent  VIC  \n10    10  36.7 2010-10-08 Engineering    Full Time  Permanent  QLD  \n```\n:::\n:::\n\n\nThis produces a randomised data set with our desired characteristics that can then be saved and reused later.\n\n## Other suggestions\n\nThe approach shown here works well enough when there are a relatively small number of variables and interactions that you need to account for. It is capable of being expanded by creating extra data generating functions however at some point things will become challenging to maintain. Once your needs for synthetic data have outgrown this approach, there are alternatives that may be worth exploring. The \\[fabricatr\\] (https://declaredesign.org/r/fabricatr/) package provides a method to generate synthetic datasets with quite sophisticated interactions between variables. Or if you have a specific real dataset whose characteristics you are looking to create, the \\[synthpop\\](https://www.synthpop.org.uk) package may be appropriate.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}