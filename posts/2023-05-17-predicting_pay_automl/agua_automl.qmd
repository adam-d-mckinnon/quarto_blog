---
title: 'FFFFFFFF'
date: 2023-05-19
description: "Using the TidyModels ecosystem to apply and tune multiple models to determine optimal performance. This approach could be used, coupling market data and existing employee pay levels, to remunerate staff fairly and effectively."
author: 
    - name: Adam D McKinnon
categories: [AI, Bias, Promotions, People Analytics]
image: "sasun-bughdaryan-GQ5uX_BlfmY-unsplash.jpg"
title-block-banner: true
draft: true
---

```{r header, echo=FALSE, code_folding = FALSE, fig.cap="[Photo by Sasun Bughdaryan on Unsplash](https://unsplash.com/fr/@sasun1990).",out.width = '100%'}
knitr::include_graphics("sasun-bughdaryan-GQ5uX_BlfmY-unsplash.jpg")
  
```

<br>

## Introduction

```{r libraries}

# data manipulation
library(tidyverse)

# modelling
library(tidymodels)
library(rules)
library(baguette)
library(finetune)
library(tictoc)
library(agua)

# Processing power
library(doParallel)
library(parallelly)

# Visualisation
library(plotly)

tidymodels_prefer()
h2o_start()

```

```{r data}

original_tbl <- readr::read_csv(file = "posts/2023-05-14-predicting_pay/dataset-37830.csv") |> 
    
    # clean the variable names
    janitor::clean_names() |> 
    
    # convert all character variables to factors
    dplyr::mutate_if(is.character, ~forcats::as_factor(.)) |> 
    
    dplyr::select(-wage)


```

```{r data_splits}

# Spending the dataset ----

set.seed(836)
pay_split     <- initial_split(original_tbl)
pay_train_tbl <- training(pay_split)
pay_test_tbl  <- testing(pay_split)



```

```{r model_recipes}

normalized_rec <- 
    recipe(logwage ~ ., data = pay_train_tbl) %>% 
    # update_role(wage, new_role = "id") |> 
    step_zv(all_predictors()) |> 
    step_dummy(all_nominal_predictors(), one_hot = TRUE) |> 
    step_normalize(all_predictors())
    

```

```{r model_specs}

auto_spec <-
  auto_ml() %>%
  set_engine("h2o", max_runtime_secs = 120, seed = 1) %>%
  set_mode("regression")

```


```{r}

auto_wflow <-
  workflow() %>%
  add_model(auto_spec) %>%
  add_recipe(normalized_rec)

```


```{r}

auto_fit <- fit(auto_wflow, data = pay_train_tbl)

extract_fit_parsnip(auto_fit)

# predict with the best model
predict(auto_fit, new_data = pay_test_tbl) |> mutate(.pred_normal = exp(.pred))

```


```{r}

agua::rank_results(auto_fit) %>%
  filter(.metric == "rmse") %>%
  arrange(rank)

collect_metrics(auto_fit, summarize = FALSE) |> 
    filter(.metric == "rmse")


autoplot(auto_fit, type = "rank", metric = "rmse") +
  theme(legend.position = "none")

```


