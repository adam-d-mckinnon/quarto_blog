{
  "hash": "997ec6a01808ac9287cf23c73012feba",
  "result": {
    "markdown": "---\ntitle: 'Going the Distance!'\ndate: 06-06-2021\ndescription: \"A practical guide to measuring distance using Google Maps in R.\"\nauthor: \n    - name: Adam D McKinnon\ncategories: [Google Maps, googleway, echarts4r, R]\nimage: \"emile-seguin-wf5ZJ2s-B7I-unsplash.jpg\"\ntitle-block-banner: true\n---\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Photo by [Émile Séguin](https://unsplash.com/@emileseguin) on [Unsplash](https://unsplash.com/).](emile-seguin-wf5ZJ2s-B7I-unsplash.jpg){width=100% height=100%}\n:::\n:::\n\n\n\n# Introduction\nTwo years ago I sat in an elevated office in Germany discussing with a colleague the value of knowing someone’s commute distance to inform their voluntary departure risk. When we worked on generating this variable neither of us could do it! Our flight risk model progressed without this variable. Months later a pandemic hit and the conversation has since (understandably) been firmly ensconced in remote and hybrid models of working. However, many sectors remain sensitive to the need to interact in person. Hospitality, Tourism and to a varying extent Retail, are indicative of this requirement. \n\nIt was therefore, interesting when two years later, a bit more experience under my belt (i.e., mistakes that I had learned from), I was again presented this challenge. The context was simple, a retail business was moving location and wanted to know which employees were likely to be adversely impacted. This information was to be used to inform communication efforts in advance of the move. \n\nThe following provides a practical guide to measuring distances using Google Maps in R. The process involves the following steps:\n\n1. Calling Google Maps,\n\n2. Unpacking the returned data,\n\n3. Generating insights.\n\n<br>\n\n## 1.\tCalling Google Maps\n\nTo use Google Maps you will need three things:\n\ni.\t**Address data.** We begin by loading some fictitious address data provided by the Victorian State Government – School addresses from 2015.\n\nii.\t**Workplace addresses**, both an old workplace address and a new workplace address. For this example, I am using the following two addresses from Victoria, Australia:\n\n\n> a. Old workplace address: 154 High St, Ashburton VIC 3147, Australia (Ashburton Public Library); and \n\n> b. New workplace address: Spring St, East Melbourne VIC 3002, Australia (Victorian Parliament Building).\n\n\niii.\t**A Google Maps API key**, which can be set up on the [Google Maps Developer Site](https://developers.google.com/maps). The Google Maps service has a free usage quota. To access Google Maps we will use the googleway library in R.\n\nWith all three pieces ready, we will then call Google Maps using the googleway::google_distance function. We will do this for two modes of transit:\n\n1.\tPublic Transport (called \"Transit\") &\n\n2.\tCar.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(stringr)\nlibrary(rrapply)\n\nlibrary(googleway)\nlibrary(purrr)\nlibrary(data.table)\nlibrary(echarts4r)\nlibrary(reactable)\n\n\n\n# # Set API key ----\nkey = my_api_key # enter your API key here\n  \n# Import Data ----\noriginal_locations_tbl <- readr::read_csv(file =\n\"http://www.education.vic.gov.au/Documents/about/research/datavic/dv165-allschoolslocationlist2015.csv\") %>% \n                          janitor::clean_names()\n\n\n\n# limit the address data to schools in the Greater Melbourne local government area's\ncouncils <- c(\"Bayside (C)\", \"Port Phillip (C)\", \"Stonnington (C)\", \"Casey (C)\", \"Melbourne (C)\", \n              \"Frankston (C)\", \"Glen Eira (C)\", \"Monash (C)\", \"Yarra (C)\", \"Moonee Valley (C)\")\n\n\n# create an address dataset\naddresses_tbl <- original_locations_tbl %>% \n  \n  # create and format the home address field, and create the old and new workplace addresses\n  dplyr::mutate(\n    home_address = base::paste0(address_line_1, \", \", address_town, \" \", address_state, \" \",address_postcode),\n    old_work_address = \"154 High St, Ashburton VIC 3147\",\n    new_work_address = \"Spring St, East Melbourne VIC 3002\",\n    employee         = paste0(\"Employee \", row_number())  \n    ) %>% \n  \n  # only include addresses from areas around Melbourne\n  dplyr::filter(lga_name %in% councils) %>% \n  \n  # randomly select 10 records\n  dplyr::sample_n(10) %>% \n  \n  dplyr::select(employee, home_address, old_work_address, new_work_address)\n  \n\n\n# check the dataset\n# head(addresses_tbl)\n\n\n# call Google Maps using googleway to calculate the distance and time for the old and new workplace locations\n# the calculations are repeated for both public transport and car modes of transport\ncommute_tbl <- addresses_tbl %>%\n\n  dplyr::mutate(\n        old_transit_calculations = purrr::map2(.x = home_address,\n                                               .y = old_work_address,\n                                               .f = ~ googleway::google_distance(origins      = .x,\n                                                                                 destinations = .y,\n                                                                                 mode         = \"transit\",\n                                                                                 key          = key,\n                                                                                 simplify     = TRUE)),\n\n        new_transit_calculations = purrr::map2(.x = home_address,\n                                               .y = new_work_address,\n                                               .f = ~ googleway::google_distance(origins      = .x,\n                                                                                 destinations = .y,\n                                                                                 mode         = \"transit\",\n                                                                                 key          = key,\n                                                                                 simplify     = TRUE)),\n\n        old_car_calculations     = purrr::map2(.x = home_address,\n                                               .y = old_work_address,\n                                               .f = ~ googleway::google_distance(origins      = .x,\n                                                                                 destinations = .y,\n                                                                                 mode         = \"driving\",\n                                                                                 key          = key,\n                                                                                 simplify     = TRUE)),\n\n        new_car_calculations     = purrr::map2(.x = home_address,\n                                               .y = new_work_address,\n                                               .f = ~ googleway::google_distance(origins      = .x,\n                                                                                 destinations = .y,\n                                                                                 mode         = \"driving\",\n                                                                                 key          = key,\n                                                                                 simplify     = TRUE))\n\n    )\n```\n:::\n\n\n\n<br>\n\n## 2. Unpacking the Data\n\nThe data returned from the google_distance function is complicated! Consequently, it required some fiddling to unpack and format in a usable fashion. While the approach developed works, I strongly suspect it could be better. Searching online has yielded several alternatives. However, I decided to stay with my own and welcome suggested improvements. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# cleaning function for results\nresults_cleaner <- function(data, old_or_new, car_or_transit){\n    \n    # for renaming multiple variables from the API call\n    var_string <- paste0(old_or_new, \"_\", car_or_transit, \"_\")\n    # for renaming the status field\n    new_name   <- paste0(var_string, \"status\")\n    \n    # receive the data\n    data |> \n        rrapply::rrapply(how = \"bind\") |> \n        janitor::clean_names() |> \n        dplyr::select(-1, -2, -7) |> # remove the last two columns\n        dplyr::rename_at(vars(starts_with(\"rows_elements_1_\")), ~ str_replace_all(., \n                                                                              pattern     = \"rows_elements_1_\",\n                                                                              replacement = var_string) \n                                                                              ) |> \n        dplyr::rename( !! quo_name(new_name) := status)\n        \n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# clean the final results for the old commute by public transport\nold_transit_commute_tbl <- commute_tbl %>%\n    dplyr::select(old_transit_calculations) %>%\n    results_cleaner(old_or_new = \"old\", car_or_transit = \"transit\")\n\n\n# clean the final results for the new commute by public transport\nnew_transit_commute_tbl <- commute_tbl %>%\n    dplyr::select(new_transit_calculations) %>%\n    results_cleaner(old_or_new = \"new\", car_or_transit = \"transit\")\n\n# clean the final results for the old commute by car\nold_car_commute_tbl <- commute_tbl %>%\n    dplyr::select(old_car_calculations) %>%\n    results_cleaner(old_or_new = \"old\", car_or_transit = \"car\")\n\n\n# clean the final results for the old commute by car\nnew_car_commute_tbl <- commute_tbl %>%\n    dplyr::select(new_car_calculations) %>%\n    results_cleaner(old_or_new = \"new\", car_or_transit = \"car\")\n\n\n\n\n# connect the original data with the new clean distance and time results\ntotal_commute_tbl <- addresses_tbl %>%\n    dplyr::bind_cols(old_transit_commute_tbl) %>% # add the columns of the old commute by public transport\n    dplyr::bind_cols(new_transit_commute_tbl) %>% # add the columns of the new commute by public transport\n    dplyr::bind_cols(old_car_commute_tbl) %>% # add the columns of the old commute by car\n    dplyr::bind_cols(new_car_commute_tbl) %>% # add the columns of the new commute by car\n\n    # filter out any results that were not OK\n    dplyr::filter(old_transit_status == \"OK\" | \n                  new_transit_status == \"OK\" | \n                  old_car_status     == \"OK\" | \n                  new_car_status     == \"OK\")\n```\n:::\n\n\n<br>\n\n## 3.\tCreating Insights\n\nThe data returned from googleway provides both the travel distance between the two points, and time required to complete the trip for the selected mode of transit. From here it is important to gauge the following:\n\n\n### 1. Are people generally better off travelling to the new office location? \n\nThis can be examined by both distance and time. However, in a city a short trip can still take considerable time. Therefore, examining the difference in time taken for the shortest option (i.e., car or public transport) appears more realistic / accurate. If the time decreased by more than 5 minutes, an improvement in commute is assumed.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculate value in Minutes (default results are in seconds)\nscale_mins <- function(x){\n  x <- x / 60 \n  round(x, digits = 0)\n}\n\n\n# calculate value in Kilometres (default results are in metres)\nscale_kms <- function(x){\n  x <- x / 1000\n  round(x, digits = 1)\n} \n\n\n\n\nfinal_commute_details_tbl <- total_commute_tbl |> \n    \n    # covert all duration variable values to minutes\n    dplyr::mutate_at(vars(ends_with(\"duration_value\")), scale_mins) %>% \n    \n      \n    # covert all distance variable values to kilometres\n    dplyr::mutate_at(vars(ends_with(\"distance_value\")), scale_kms) %>% \n  \n    # calculate the difference in distance and time between the new and old locations\n    # NOTE: calculations are based on new - old. Therefore, negative numbers indicate less distance and time, \n    # whereas positive numbers indicate an increase in distance and time\n    dplyr::mutate(\n        diff_transit_commute_distance = new_transit_distance_value - old_transit_distance_value,\n        diff_transit_commute_time     = new_transit_duration_value - old_transit_duration_value,\n        diff_car_commute_distance     = new_car_distance_value - old_car_distance_value,\n        diff_car_commute_time         = new_car_duration_value - old_car_duration_value,\n\n        # find the shortest time (i.e., transit or car) for both the old and new offices\n        old_office_min_mins = base::ifelse(old_transit_duration_value < old_car_duration_value, \n                                           old_transit_duration_value, old_car_duration_value),\n        new_office_min_mins = base::ifelse(new_transit_duration_value < new_car_duration_value, \n                                           new_transit_duration_value, new_car_duration_value),\n        \n        # find the differences in the best commute times between the two locations\n        new_office_best_commute_diff = new_office_min_mins - old_office_min_mins,\n        \n        # find which is the better commute for each person (new office, old office, or similar). This assumes \n        # that a commute is better if the commute time is reduced by more than 5 minutes\n        preferred_commute_location   = dplyr::case_when((old_office_min_mins - new_office_min_mins) < -5 ~ \"Old Office\",\n                                                        (new_office_min_mins - old_office_min_mins) < -5 ~ \"New Office\",\n                                                        TRUE ~ \"Similar Commute\"),\n        \n        # determine the best mode of transport for the new location\n        preferred_mode_transport     = base::ifelse(new_transit_duration_value <= new_car_duration_value, \"Public Transport\", \"Car\")\n                                        \n        )\n\n\n# visually represent the impact of the new location to travel time\nfinal_commute_details_tbl %>% \n  dplyr::count(preferred_commute_location) %>% \n  echarts4r::e_chart(preferred_commute_location) %>% \n  echarts4r::e_bar(n) %>% \n  echarts4r::e_labels(position = \"insideTop\") %>% \n  echarts4r::e_legend(show = FALSE) %>% \n  echarts4r::e_title(text = \"Preferred Office Location Based on Travel Time\",\n                     \"Preferred Location Is Defined by A Reduction In Travel Time Of More Than 5 Minutes\",\n                     left = \"10%\") %>% \n  echarts4r::e_tooltip() \n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-59c7db25ccc50c5d1ec6\" style=\"width:100%;height:500px;\" class=\"echarts4r html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-59c7db25ccc50c5d1ec6\">{\"x\":{\"theme\":\"\",\"tl\":false,\"draw\":true,\"renderer\":\"canvas\",\"events\":[],\"buttons\":[],\"opts\":{\"yAxis\":[{\"show\":true}],\"xAxis\":[{\"data\":[\"Old Office\",\"Similar Commute\"],\"type\":\"category\",\"boundaryGap\":true}],\"legend\":{\"data\":[\"n\"],\"show\":false,\"type\":\"plain\"},\"series\":[{\"data\":[{\"value\":[\"Old Office\",\"7\"]},{\"value\":[\"Similar Commute\",\"3\"]}],\"name\":\"n\",\"type\":\"bar\",\"yAxisIndex\":0,\"xAxisIndex\":0,\"coordinateSystem\":\"cartesian2d\",\"label\":{\"show\":true,\"position\":\"insideTop\"}}],\"title\":[{\"left\":\"10%\",\"text\":\"Preferred Office Location Based on Travel Time\",\"subtext\":\"Preferred Location Is Defined by A Reduction In Travel Time Of More Than 5 Minutes\"}],\"tooltip\":{\"trigger\":\"item\"}},\"dispose\":true},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\nThe visualisation above depicts how the location change will impact employee travel, and it appears the majority of individuals will be worse off when commuting to the new location.  \n\n### 2. Which individuals will have shorter or longer travel times?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_commute_details_tbl %>% \n  \n  # select the preferred variables\n  dplyr::select(employee, home_address, preferred_commute_location, new_office_best_commute_diff,preferred_mode_transport, \n                new_transit_duration_value, diff_transit_commute_time, new_car_duration_value, \n                diff_car_commute_time) %>% \n  \n    dplyr::arrange(new_office_best_commute_diff) %>% \n  \n  # rename the variables for more readable output\n  dplyr::rename(\n                Employee = employee,\n                `Home Address`= home_address,\n                `Preferred Office` = preferred_commute_location,\n                `Commute Change (Mins)` = new_office_best_commute_diff,\n                `Preferred Transport for New Office` = preferred_mode_transport,\n                `Time via Public Transport (Mins)` = new_transit_duration_value,\n                `Public Transport Time Saving (Mins)` = diff_transit_commute_time,\n                `Time via Car (Mins)` = new_car_duration_value,\n                `Car Time Saving (Mins)` = diff_car_commute_time) %>% \n  \n  reactable::reactable(\n    # pagination and searching options\n    showPageSizeOptions = TRUE,\n    pageSizeOptions = c(5, 10, 25, 50, 100),\n    defaultPageSize = 5,\n    \n    # table formatting options\n    outlined = TRUE,\n    borderless = TRUE,\n    striped = TRUE,\n    resizable = TRUE,\n\n    # column width\n    columns = list(\n      Employee = reactable::colDef(minWidth = 150),\n      `Home Address` = reactable::colDef(minWidth = 175),\n      `Preferred Office` = reactable::colDef(minWidth = 150, align = \"center\"),\n      `Commute Change (Mins)` = reactable::colDef(minWidth = 150, align = \"center\"),\n      `Preferred Transport for New Office`  = reactable::colDef(minWidth = 150, align = \"center\"),\n      `Time via Public Transport (Mins)`  = reactable::colDef(minWidth = 150, align = \"center\"),\n      `Public Transport Time Saving (Mins)`  = reactable::colDef(minWidth = 150, align = \"center\"),\n      `Time via Car (Mins)` = reactable::colDef(minWidth = 150, align = \"center\"),\n      `Car Time Saving (Mins)`= reactable::colDef(minWidth = 150, align = \"center\")\n    ),\n    \n    # theming changes    \n    theme = reactable::reactableTheme(\n      highlightColor = \"#f0f5f9\",\n      cellPadding = \"8px 12px\",\n      style = list(fontFamily = \"-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif\"))\n  )\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-d14965e3d768059028f6\" class=\"reactable html-widget\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-d14965e3d768059028f6\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"Employee\":[\"Employee 1271\",\"Employee 1455\",\"Employee 1310\",\"Employee 2011\",\"Employee 832\",\"Employee 861\",\"Employee 1031\",\"Employee 2225\",\"Employee 1357\",\"Employee 1869\"],\"Home Address\":[\"57 Miles Street, Southbank VIC 3006\",\"Quinn Grove, Keilor East VIC 3033\",\"101 Glenhuntly Road, Elwood VIC 3184\",\"517-519 Orrong Road, ARMADALE VIC 3143\",\"1 Tucker Street, Cranbourne VIC 3977\",\"25 Forster Avenue, Frankston North VIC 3200\",\"David Collins Drive, Endeavour Hills VIC 3802\",\"442-452 North Road, ORMOND VIC 3204\",\"291a Mckinnon Road, Mckinnon VIC 3204\",\"250 Stephensons Road, MOUNT WAVERLEY VIC 3149\"],\"Preferred Office\":[\"Similar Commute\",\"Similar Commute\",\"Similar Commute\",\"Old Office\",\"Old Office\",\"Old Office\",\"Old Office\",\"Old Office\",\"Old Office\",\"Old Office\"],\"Commute Change (Mins)\":[-3,-2,0,7,10,10,10,12,15,16],\"Preferred Transport for New Office\":[\"Car\",\"Car\",\"Car\",\"Car\",\"Car\",\"Car\",\"Car\",\"Car\",\"Car\",\"Car\"],\"Time via Public Transport (Mins)\":[31,77,49,44,139,110,126,63,74,68],\"Public Transport Time Saving (Mins)\":[-33,-54,-64,-52,-20,-39,-40,-23,-20,30],\"Time via Car (Mins)\":[13,29,23,20,45,43,36,28,30,26],\"Car Time Saving (Mins)\":[-3,-2,0,7,10,10,10,12,15,16]},\"columns\":[{\"accessor\":\"Employee\",\"name\":\"Employee\",\"type\":\"character\",\"minWidth\":150},{\"accessor\":\"Home Address\",\"name\":\"Home Address\",\"type\":\"character\",\"minWidth\":175},{\"accessor\":\"Preferred Office\",\"name\":\"Preferred Office\",\"type\":\"character\",\"minWidth\":150,\"align\":\"center\"},{\"accessor\":\"Commute Change (Mins)\",\"name\":\"Commute Change (Mins)\",\"type\":\"numeric\",\"minWidth\":150,\"align\":\"center\"},{\"accessor\":\"Preferred Transport for New Office\",\"name\":\"Preferred Transport for New Office\",\"type\":\"character\",\"minWidth\":150,\"align\":\"center\"},{\"accessor\":\"Time via Public Transport (Mins)\",\"name\":\"Time via Public Transport (Mins)\",\"type\":\"numeric\",\"minWidth\":150,\"align\":\"center\"},{\"accessor\":\"Public Transport Time Saving (Mins)\",\"name\":\"Public Transport Time Saving (Mins)\",\"type\":\"numeric\",\"minWidth\":150,\"align\":\"center\"},{\"accessor\":\"Time via Car (Mins)\",\"name\":\"Time via Car (Mins)\",\"type\":\"numeric\",\"minWidth\":150,\"align\":\"center\"},{\"accessor\":\"Car Time Saving (Mins)\",\"name\":\"Car Time Saving (Mins)\",\"type\":\"numeric\",\"minWidth\":150,\"align\":\"center\"}],\"resizable\":true,\"defaultPageSize\":5,\"showPageSizeOptions\":true,\"pageSizeOptions\":[5,10,25,50,100],\"paginationType\":\"numbers\",\"showPageInfo\":true,\"minRows\":1,\"outlined\":true,\"borderless\":true,\"striped\":true,\"theme\":{\"highlightColor\":\"#f0f5f9\",\"cellPadding\":\"8px 12px\",\"style\":{\"fontFamily\":\"-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif\"}},\"dataKey\":\"3ba05b3834c4d31a6f018e7068b20e08\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nThe above table could readily be exported to Excel and delivered to Leaders, Managers, Transition Teams, HRBP's, etc., to help inform the delivery of personalised discussions with staff regarding proposed or upcoming changes. In addition, it could also help to inform the identification of voluntary flight risks, based on negative travel experiences associated with the move. Moreover, additional analyses could be performed on this data to help inform communication efforts (e.g., clustering to develop employee personas).\n\n<br>\n\n# Conclusion:\n\nI often try to think of ways to prompt people to reach out to the People Analytics team for advice or assistance. One quick-fire way, based on this experience, is through automation. If colleagues are having to do things manually more than a dozen times (i.e., look up commute times on Google Maps), its likely the People Analytics Team can help. While automating work is not necessarily a core remit of People Analytics Team’s, it can be a highly useful approach for building both credibility and goodwill among business colleagues (i.e., low actual effort, high perceived value), which can in turn lead to bigger opportunities for both parties. In addition, this approach (and related activities) represent useful activities that can be performed in support of new site selection during a due diligence phase (i.e., pre-selecting venues). \n\nIn this example we used a series of addresses to calculate travel distance and time between fictitious home and work addresses for different modes of transit. While using Google Maps programmatically is not without some learning required, I hope this example assists in making it more accessible to a broader range of users. Such functions can and should be used in advance of physical location changes to help proactively identify and mitigate distance-related challenges for all parties involved, both employees and consumers. \n\nHappy coding!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/echarts4r-4.8.0/echarts-en.min.js\"></script>\n<script src=\"../../site_libs/echarts4r-4.8.0/ecStat.min.js\"></script>\n<script src=\"../../site_libs/echarts4r-4.8.0/dataTool.min.js\"></script>\n<script src=\"../../site_libs/echarts4r-binding-0.4.4/echarts4r.js\"></script>\n<script src=\"../../site_libs/core-js-2.5.3/shim.min.js\"></script>\n<script src=\"../../site_libs/react-17.0.0/react.min.js\"></script>\n<script src=\"../../site_libs/react-17.0.0/react-dom.min.js\"></script>\n<script src=\"../../site_libs/reactwidget-1.0.0/react-tools.js\"></script>\n<script src=\"../../site_libs/reactable-binding-0.3.0/reactable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}